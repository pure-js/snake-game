{"version":3,"sources":["Snake/moveSnake.js","Snake/Snake.js","App.js","registerServiceWorker.js","index.js"],"names":["calcHead","x","y","turn","dimenision","console","error","width","height","justDraw","canvasContext","rectangles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","rect","value","fillStyle","fill","fillRect","err","return","Snake","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","draw","ctx","canvas","current","getContext","_this$props$snake","snake","position","length","thickness","size","globalCompositeOperation","clearRect","save","arrLength","i","z","push","calcInitialSnake","handleKeyDown","key","currentSnake","log","prevRectangles","nextRectangles","JSON","parse","stringify","shift","head","forEach","square","getNextRectangles","last","first","React","createRef","window","innerWidth","focus","_this2","react_default","a","createElement","className","onKeyDown","event","tabIndex","ref","innerHeight","PureComponent","App","Fragment","src_Snake_Snake","target","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8OAAA,SAASA,EAASC,EAAGC,EAAGC,EAAMC,GAC5B,OAAQD,GACN,IAAK,UACHD,GAAKE,EACL,MACF,IAAK,aACHH,GAAKG,EACL,MACF,IAAK,YACHF,GAAKE,EACL,MACF,IAAK,YACHH,GAAKG,EACL,MACF,QACEC,QAAQC,MAAM,oBAGlB,MAAO,CACLL,IACAC,IACAK,MAAOH,EACPI,OAAQJ,GAkCZ,SAASK,EAASC,EAAeC,GAAY,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAC3C,QAAAC,EAAAC,EAAmBN,EAAnBO,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA+B,KAApBU,EAAoBN,EAAAO,MAC7Bb,EAAcc,UAAYF,EAAKG,KAC/Bf,EAAcgB,SAASJ,EAAKrB,EAAGqB,EAAKpB,EAAGoB,EAAKf,MAAOe,EAAKd,SAHf,MAAAmB,GAAAd,GAAA,EAAAC,EAAAa,EAAA,YAAAf,GAAA,MAAAK,EAAAW,QAAAX,EAAAW,SAAA,WAAAf,EAAA,MAAAC,cCsB9Be,cAzEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,KAAO,WACL,IACMC,EADSR,EAAKS,OAAOC,QACRC,WAAW,MAFnBC,EAG6BZ,EAAKD,MAAMc,MAA3CC,EAHGF,EAGHE,SAAUC,EAHPH,EAGOG,OAAQC,EAHfJ,EAGeI,UAClBC,EAASjB,EAAKD,MAAdkB,KAERT,EAAIU,yBAA2B,mBAC/BV,EAAIW,UAAU,EAAG,EAAGF,EAAMA,GAE1BT,EAAIY,OAmBJpB,EAAKa,MAjBL,SAA0BC,EAAUC,EAAQC,GAG1C,IAFA,IAAMH,EAAQ,GACRQ,EAAYN,EAASC,EAClBM,EAAI,EAAGA,EAAID,EAAWC,IAAK,CAClC,IAAMC,EAAI,CACR7B,KAAM,iBACNxB,EAAG4C,EAAS5C,EAAKoD,EAAIN,EACrB7C,EAAG2C,EAAS3C,EACZK,MAAOwC,EACPvC,OAAQuC,GAEVH,EAAMW,KAAKD,GAGb,OADAV,EAAMA,EAAME,OAAS,GAAGrB,KAAO,iBACxBmB,EAGIY,CAAiBX,EAAUC,EAAQC,GAChDtC,EAAS8B,EAAKR,EAAKa,QApCFb,EAgDnB0B,cAAgB,SAACC,EAAKC,GACpBtD,QAAQuD,IAAIF,GACZ,IAAMnB,EAAMR,EAAKS,OAAOC,QAAQC,WAAW,MAC3CX,EAAKa,MDrBT,SAA2BiB,EAAgB1D,EAAM4C,GAC/C,IAAMe,EAAiBC,KAAKC,MAAMD,KAAKE,UAAUJ,IAGjDC,EAAeI,QACf,IAAMC,EAAOL,EAAeA,EAAehB,OAAS,GAU5C7C,EAASkE,EAATlE,EAAGC,EAAMiE,EAANjE,EAGX,OAFA4D,EAAeP,KAAKvD,EAASC,EAAGC,EAAGC,EAAM4C,IARvCe,EAAeM,QAAQ,SAACC,GACtBA,EAAO5C,KAAO,mBAEHqC,EAAeA,EAAehB,OAAS,GAC/CrB,KAAO,iBAMPqC,ECGQQ,CAAkBX,EAAcD,EAAK,IAClD,IAAMa,EAAOZ,EAAa,GACpBa,EAAQb,EAAaA,EAAab,OAAS,GACjDP,EAAIW,UAAUqB,EAAKtE,EAAGsE,EAAKrE,EAAGqE,EAAKhE,MAAOgE,EAAK/D,QAC/C+B,EAAIW,UAAUsB,EAAMvE,EAAGuE,EAAMtE,EAAGsE,EAAMjE,MAAOiE,EAAMhE,QACnDC,EAAS8B,EAAKR,EAAKa,QAtDnBb,EAAKa,MAAQ,GACbb,EAAKS,OAASiC,IAAMC,YAHH3C,mFA2CjBG,KAAKI,OACLJ,KAAK3B,MAAQoE,OAAOC,WACpB1C,KAAKM,OAAOC,QAAQoC,yCAcb,IAAAC,EAAA5C,KAEP,OACE6C,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVC,UAAW,SAACC,GAAD,OAAWN,EAAKrB,cAAc2B,EAAM1B,IAAKoB,EAAKlC,QACzDyC,SAAS,KAETN,EAAAC,EAAAC,cAAA,UAAQI,SAAS,IAAIC,IAAKpD,KAAKM,OAAQjC,MAAOoE,OAAOC,WAAYpE,OAAQmE,OAAOY,YAAc,GAAIL,UAAU,2BApEhGM,iBCkBLC,0LATX,OACEV,EAAAC,EAAAC,cAACF,EAAAC,EAAMU,SAAP,KACEX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,cACAH,EAAAC,EAAAC,cAACU,EAAD,CAAO3C,KAAM,IAAKJ,MAVR,CACZC,SAAU,CACR5C,EAAG,IAAKC,EAAG,KAEb6C,UAAW,GACXD,OAAQ,IAK0B8C,OAAO,aAZ7BC,cCMZC,EAAcC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1B1G,QAAQuD,IAAI,6CAKZvD,QAAQuD,IAAI,2CAMrBoD,MAAM,SAAA1G,GACLD,QAAQC,MAAM,4CAA6CA,KCzEjE2G,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,cAAwB5C,OAAOqB,UAC3CwB,SAAW7C,OAAOqB,SAASwB,OAIvC,OAGF7C,OAAO8C,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,cAAN,sBAEPzB,GAiDV,SAAiCM,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7B7B,OAAOqB,SAASmC,aAKpBhC,EAAgBC,KAGnBY,MAAM,WACL3G,QAAQuD,IACN,mEArEAwE,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,KAAK,WACjCnG,QAAQuD,IACN,+GAMJuC,EAAgBC,MCzCxBiC","file":"static/js/main.51927fb8.chunk.js","sourcesContent":["function calcHead(x, y, turn, dimenision) {\n  switch (turn) {\n    case 'ArrowUp':\n      y -= dimenision;\n      break;\n    case 'ArrowRight':\n      x += dimenision;\n      break;\n    case 'ArrowDown':\n      y += dimenision;\n      break;\n    case 'ArrowLeft':\n      x -= dimenision;\n      break;\n    default:\n      console.error('Impossible turn!');\n  }\n\n  return {\n    x,\n    y,\n    width: dimenision,\n    height: dimenision,\n  };\n}\n\nfunction moveSnake(snake, turn) {\n  const newSnake = snake.slice();\n  const snakeHead = newSnake[newSnake.length - 1];\n  const newHead = calcHead(snakeHead, turn);\n  newSnake.push(newHead);\n  newSnake.shift();\n  return newSnake;\n}\n\nfunction getNextRectangles(prevRectangles, turn, thickness) {\n  const nextRectangles = JSON.parse(JSON.stringify(prevRectangles));\n\n  // Remove end of sanke\n  nextRectangles.shift();\n  const head = nextRectangles[nextRectangles.length - 1];\n\n  function paintHead() {\n    nextRectangles.forEach((square) => {\n      square.fill = 'rgb(39,159,39)';\n    });\n    const head = nextRectangles[nextRectangles.length - 1];\n    head.fill = 'rgb(200, 0, 0)';\n  }\n\n  const { x, y } = head;\n  nextRectangles.push(calcHead(x, y, turn, thickness));\n  paintHead();\n  return nextRectangles;\n}\n\nfunction justDraw(canvasContext, rectangles) {\n  for (const rect of rectangles) {\n    canvasContext.fillStyle = rect.fill;\n    canvasContext.fillRect(rect.x, rect.y, rect.width, rect.height);\n  }\n}\n\nexport {\n  calcHead,\n  getNextRectangles,\n  justDraw,\n  moveSnake as default,\n};\n","import React, { PureComponent } from 'react';\nimport { justDraw, getNextRectangles } from './moveSnake';\nimport './Snake.css';\n\nclass Snake extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.snake = [];\n    this.canvas = React.createRef();\n    // this.ctx = this.canvas.current.getContext('2d');\n  }\n\n  draw = () => {\n    const canvas = this.canvas.current;\n    const ctx = canvas.getContext('2d');\n    const { position, length, thickness } = this.props.snake;\n    const { size } = this.props;\n\n    ctx.globalCompositeOperation = 'destination-over';\n    ctx.clearRect(0, 0, size, size); // clear canvas\n\n    ctx.save();\n\n    function calcInitialSnake(position, length, thickness) {\n      const snake = [];\n      const arrLength = length / thickness;\n      for (let i = 0; i < arrLength; i++) {\n        const z = {\n          fill: 'rgb(39,159,39)',\n          x: position.x + (i * thickness),\n          y: position.y,\n          width: thickness,\n          height: thickness,\n        };\n        snake.push(z);\n      }\n      snake[snake.length - 1].fill = 'rgb(200, 0, 0)';\n      return snake;\n    }\n\n    this.snake = calcInitialSnake(position, length, thickness);\n    justDraw(ctx, this.snake);\n\n    // window.requestAnimationFrame(this.draw);\n  }\n\n  componentDidMount() {\n    // window.requestAnimationFrame(this.draw);\n    this.draw();\n    this.width = window.innerWidth;\n    this.canvas.current.focus();\n  }\n\n  handleKeyDown = (key, currentSnake) => {\n    console.log(key);\n    const ctx = this.canvas.current.getContext('2d');\n    this.snake = getNextRectangles(currentSnake, key, 10);\n    const last = currentSnake[0];\n    const first = currentSnake[currentSnake.length - 1];\n    ctx.clearRect(last.x, last.y, last.width, last.height); // clear last element\n    ctx.clearRect(first.x, first.y, first.width, first.height); // clear head\n    justDraw(ctx, this.snake);\n  }\n  \n  render() {\n    // const { size } = this.props;\n    return (\n      <div\n        className='noOutline'\n        onKeyDown={(event) => this.handleKeyDown(event.key, this.snake)}\n        tabIndex='0'\n      >\n        <canvas tabIndex=\"0\" ref={this.canvas} width={window.innerWidth} height={window.innerHeight - 80} className='FieldContainer'></canvas>\n      </div>\n    );  \n  }\n}\n\nexport default Snake;\n","import React, { Component } from 'react';\nimport Snake from './Snake/Snake';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const snake = {\n      position: {\n        x: 150, y: 120,\n      },\n      thickness: 10,\n      length: 60,\n     };\n    return (\n      <React.Fragment>\n        <h1 className='heading'>Snake game</h1>\n        <Snake size={500} snake={snake} target=''/>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}